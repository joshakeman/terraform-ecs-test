// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "new-proto/api/models"

	mock "github.com/stretchr/testify/mock"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

// CompleteTask provides a mock function with given fields: ctx, id
func (_m *TaskService) CompleteTask(ctx context.Context, id int) *models.Error {
	ret := _m.Called(ctx, id)

	var r0 *models.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Error); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Error)
		}
	}

	return r0
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TaskService) CreateTask(ctx context.Context, task *models.CreateTaskRequest) int {
	ret := _m.Called(ctx, task)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *models.CreateTaskRequest) int); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: ctx
func (_m *TaskService) GetAllTasks(ctx context.Context) []models.Task {
	ret := _m.Called(ctx)

	var r0 []models.Task
	if rf, ok := ret.Get(0).(func(context.Context) []models.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	return r0
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *TaskService) GetTask(ctx context.Context, id int) (*models.Task, *models.Error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(context.Context, int) *models.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, task
func (_m *TaskService) UpdateTask(ctx context.Context, task *models.UpdateTaskRequest) *models.Error {
	ret := _m.Called(ctx, task)

	var r0 *models.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateTaskRequest) *models.Error); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Error)
		}
	}

	return r0
}
